package telas;

import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import produto.ProdutoAcabado;
import produto.ProdutoCongelado;
import produto.ProdutoCongeladoDao;
import java.util.Date;
import produto.ProdutoAcabadoDao;

/**
 *
 * @author LUKAS
 */
public class TelaProduto extends javax.swing.JFrame {

    public static TelaProduto telaProduto = new TelaProduto();

    public static ProdutoCongelado produtoCongelado = new ProdutoCongelado();
    public static ProdutoAcabado produtoAcabado = new ProdutoAcabado();
    LocalDate data = LocalDate.now();
    DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    public static RelatorioProdutoAcabado relatorioProdutoAcabado = new RelatorioProdutoAcabado();
    public static ProdutoCongeladoDao congeladoDao = new ProdutoCongeladoDao();
    public static ProdutoAcabadoDao acabadoDao = new ProdutoAcabadoDao();

    /**
     * Creates new form Produto
     */
    public TelaProduto() {
        initComponents();
        jPanelItem.setVisible(false);
        jbExcluir.setEnabled(false);
        jbSalvar.setEnabled(false);
        jlRendimento.setVisible(false);
        txtProporcao.setVisible(false);
        txtData.setEditable(false);
        txtEstoqueOrigem.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        JbVoltarProduto = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jlRendimento = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        txtDescricao = new javax.swing.JTextField();
        txtQuantidadeEmEstoque = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        txtProporcao = new javax.swing.JTextField();
        jPanelItem = new javax.swing.JPanel();
        txtIdProdutoCongelado = new javax.swing.JTextField();
        jLIdCongelado = new javax.swing.JLabel();
        txtNomeProdutoCongelado = new javax.swing.JTextField();
        jLNomeCongelado = new javax.swing.JLabel();
        txtEstoqueOrigem = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtIdEstoqueOrigem = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtPreco = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jbBuscar = new javax.swing.JButton();
        jbIncluir = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbRelatorio = new javax.swing.JButton();
        txtLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(1100, 100));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("PRODUTO");

        JbVoltarProduto.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JbVoltarProduto.setText("VOLTAR");
        JbVoltarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbVoltarProdutoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 649, Short.MAX_VALUE)
                .addComponent(JbVoltarProduto)
                .addGap(80, 80, 80))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(JbVoltarProduto))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(895, 800));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel2.setText("ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel3.setText("Nome");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel4.setText("Descrição");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel5.setText("Preço");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel6.setText("Quantidade em Estoque");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel8.setText("Data");

        jlRendimento.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jlRendimento.setText("Rendimento %");

        txtID.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        txtNome.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtNome.setNextFocusableComponent(txtDescricao);

        txtDescricao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtDescricao.setNextFocusableComponent(txtPreco);

        txtQuantidadeEmEstoque.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtQuantidadeEmEstoque.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtQuantidadeEmEstoque.setNextFocusableComponent(txtIdProdutoCongelado);

        txtData.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        txtProporcao.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        jPanelItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Receita"));

        txtIdProdutoCongelado.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtIdProdutoCongelado.setNextFocusableComponent(txtNome);
        txtIdProdutoCongelado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdProdutoCongeladoFocusLost(evt);
            }
        });
        txtIdProdutoCongelado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdProdutoCongeladoKeyPressed(evt);
            }
        });

        jLIdCongelado.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLIdCongelado.setText("ID");

        txtNomeProdutoCongelado.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        jLNomeCongelado.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLNomeCongelado.setText("Nome");

        javax.swing.GroupLayout jPanelItemLayout = new javax.swing.GroupLayout(jPanelItem);
        jPanelItem.setLayout(jPanelItemLayout);
        jPanelItemLayout.setHorizontalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdProdutoCongelado, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLIdCongelado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLNomeCongelado)
                    .addComponent(txtNomeProdutoCongelado, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanelItemLayout.setVerticalGroup(
            jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelItemLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLIdCongelado)
                    .addComponent(jLNomeCongelado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdProdutoCongelado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNomeProdutoCongelado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        txtEstoqueOrigem.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        txtEstoqueOrigem.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel9.setText("Estoque Origem");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel10.setText("Cod.");

        txtIdEstoqueOrigem.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel7.setText("R$");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel11.setText("KG");

        txtPreco.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(txtIdEstoqueOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEstoqueOrigem))
                        .addGap(126, 126, 126)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(131, 131, 131))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(797, 797, 797))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlRendimento)
                                        .addComponent(txtProporcao, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(156, 156, 156)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(txtQuantidadeEmEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel11))
                                        .addComponent(jLabel6)))
                                .addComponent(txtDescricao, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 845, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(63, 63, 63))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEstoqueOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdEstoqueOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(55, 55, 55)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jLabel4)
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtQuantidadeEmEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jlRendimento)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtProporcao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44)
                .addComponent(jPanelItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(150, 800));

        jbBuscar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbIncluir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbIncluir.setText("Incluir");
        jbIncluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbIncluir.setNextFocusableComponent(txtNome);
        jbIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIncluirActionPerformed(evt);
            }
        });

        jbSalvar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbRelatorio.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jbRelatorio.setText("Relatório");
        jbRelatorio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRelatorioActionPerformed(evt);
            }
        });

        txtLimpar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtLimpar.setText("Limpar");
        txtLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbExcluir)
                    .addComponent(jbRelatorio)
                    .addComponent(jbSalvar)
                    .addComponent(jbIncluir)
                    .addComponent(jbBuscar)
                    .addComponent(txtLimpar))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jbBuscar)
                .addGap(50, 50, 50)
                .addComponent(jbIncluir)
                .addGap(50, 50, 50)
                .addComponent(jbSalvar)
                .addGap(50, 50, 50)
                .addComponent(jbExcluir)
                .addGap(50, 50, 50)
                .addComponent(jbRelatorio)
                .addGap(50, 50, 50)
                .addComponent(txtLimpar)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 953, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JbVoltarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbVoltarProdutoActionPerformed
        dispose();
        Principal principal = new Principal();
        principal.setVisible(true);
    }//GEN-LAST:event_JbVoltarProdutoActionPerformed

    private void jbRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRelatorioActionPerformed
        Object[] opcao = {"CONGELADO", "ACABADO", "CANCELAR"};

        int estoque = JOptionPane.showOptionDialog(null, "ESCOLHA O ESTOQUE", "RELATÓRIO ESTOQUE", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, opcao, opcao[0]);

        if (estoque == 0) {
            RelatorioProdutoCongelado relatorioProdutoCongelado = new RelatorioProdutoCongelado();
            relatorioProdutoCongelado.setVisible(true);
            dispose();
        } else if (estoque == 1) {
            RelatorioProdutoAcabado relatorioProdutoAcabado = new RelatorioProdutoAcabado();
            relatorioProdutoAcabado.setVisible(true);
            dispose();
        } else if (estoque == 2) {
            JOptionPane.showMessageDialog(jlRendimento, "Operação cancelada");
        }


    }//GEN-LAST:event_jbRelatorioActionPerformed

    private void jbIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIncluirActionPerformed

        Object[] options = {"CONGELADO", "ACABADO", "CANCELAR"};

        int estoque = JOptionPane.showOptionDialog(null, "ESCOLHA O ESTOQUE DE ORIGEM.", "ESTOQUE", JOptionPane.DEFAULT_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null, options, options[0]);
        boolean statusCongelado = congeladoDao.conectar();
        boolean statusAcabado = acabadoDao.conectar();

        if (statusCongelado == true) {

            if (estoque == 0) {

                String strQuantEmEstoque = Double.toString(produtoCongelado.getQuantidadeEmEstoque());
                txtQuantidadeEmEstoque.setText(strQuantEmEstoque);

                String strID = Integer.toString(congeladoDao.ProximoId() + 1);
                txtID.setText(strID);
                txtID.setEditable(false);
                txtIdEstoqueOrigem.setText(Integer.toString(estoque + 1));
                txtIdEstoqueOrigem.setEditable(false);
                txtEstoqueOrigem.setText("CONGELADO");
                txtEstoqueOrigem.setEditable(false);
                txtNome.setText("");
                txtDescricao.setText("");
                txtProporcao.setText("");
                txtProporcao.setVisible(true);
                txtProporcao.setVisible(true);
                txtProporcao.setText("");
                jPanelItem.setVisible(false);
                String strData = data.format(fmt);
                txtData.setText(strData);
                txtData.setEditable(false);
                txtQuantidadeEmEstoque.setEditable(false);
                jbSalvar.setEnabled(true);
                txtProporcao.setVisible(true);
                jlRendimento.setVisible(true);
                jbIncluir.nextFocus();
                jbExcluir.setEnabled(false);
                txtPreco.setText("");

            }
        }
        if (statusAcabado == true) {
            if (estoque == 1) {

                String strQuantEmEstoque = Double.toString(produtoAcabado.getQuantidadeEmEstoque());
                txtQuantidadeEmEstoque.setText(strQuantEmEstoque);

                String strID = Integer.toString(acabadoDao.ProximoId() + 1);
                txtID.setText(strID);
                txtID.setEditable(false);
                txtIdEstoqueOrigem.setText(Integer.toString(estoque + 1));
                txtIdEstoqueOrigem.setEditable(false);
                txtEstoqueOrigem.setText("ACABADO");
                txtEstoqueOrigem.setEditable(false);
                txtNome.setText("");
                txtDescricao.setText("");
                txtProporcao.setText("");
                txtIdProdutoCongelado.setText("");
                txtNomeProdutoCongelado.setText("");
                txtProporcao.setText("");
                jPanelItem.setVisible(true);
                txtProporcao.setVisible(false);
                jlRendimento.setVisible(false);
                txtNomeProdutoCongelado.setEditable(false);
                txtQuantidadeEmEstoque.setEditable(false);
                String strData = data.format(fmt);
                txtData.setText(strData);
                txtData.setEditable(false);
                jbSalvar.setEnabled(true);
                jbIncluir.nextFocus();
                jbExcluir.setEnabled(false);
                txtPreco.setText("");

            }
        }
        if (estoque == 2) {
            JOptionPane.showMessageDialog(rootPane, "Operação cancelada");
        }
    }//GEN-LAST:event_jbIncluirActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        int id;
        int estoque = 0;
        String nome = "";
        String descricao = "";
        double preco = 0.0;
        int IdCongelado = 0;
        double proporcao = 0.0;
        String strData;
        boolean statusCongelado;
        boolean statusAcabado;
        int resposta;
        java.sql.Date sqlDate = null;

        try {
            estoque = Integer.parseInt(txtIdEstoqueOrigem.getText());
            id = Integer.parseInt(txtID.getText());
            nome = txtNome.getText().toUpperCase();
            descricao = txtDescricao.getText().toUpperCase();
            preco = Double.parseDouble(txtPreco.getText());
            strData = txtData.getText();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Preencha todos os campos");
            return;
        }

        if (txtNome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Campo Nome não pode ser vazio!");
            return;
        } else if (txtPreco.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Campo Preço não pode ser vazio!");
            return;
        } else if (txtDescricao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Campo Descrição não pode ser vazio!");
            return;
        }

        String strPreco = txtPreco.getText();
        boolean testePreco = strPreco.matches("[0-9]{2}[.][0-9]{2}|[0-9]{3}[.][0-9]{2}");
        String strProporcao = txtProporcao.getText();
        boolean testeProporcao = strProporcao.matches("[0-9]{1}[.][0-9]{1}|[0-9]{1}");
        String strIdProdutoCongelado = txtIdProdutoCongelado.getText();
        boolean testeIdProdutoCongelado = strIdProdutoCongelado.matches("[0-9]{1}|[0-9]{2}|[0-9]{3}");

        if (testePreco == false) {
            JOptionPane.showMessageDialog(rootPane, "Preencha o campo PREÇO no formato XX.XX ou XXX.XX ");
            return;
        } else {

            switch (estoque) {
                case 1:
                    statusCongelado = congeladoDao.conectar();

                    if (statusCongelado == false) {
                        JOptionPane.showMessageDialog(null, "Erro de conexão");
                    } else {
                        try {
                            proporcao = Double.parseDouble(txtProporcao.getText());
                        } catch (NumberFormatException e) {

                        }
                        if (testeProporcao == false) {
                            JOptionPane.showMessageDialog(rootPane, "Preencha o campo RENDIMENTO no formato X ou X.X ");
                            return;
                        } else if (txtProporcao.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(rootPane, "Preencha o campo PROPORÇÃO!");
                            return;
                        }

                        SimpleDateFormat conversor = new SimpleDateFormat("dd/MM/yyyy");
                        try {
                            Date dataConvertida = conversor.parse(strData);
                            sqlDate = new java.sql.Date(dataConvertida.getTime());
                        } catch (ParseException e) {
                            System.out.println("Erro na conversão da data");
                        }

                        ProdutoCongelado congelado = new ProdutoCongelado(id, nome, descricao, preco, sqlDate, proporcao);
                        if (congeladoDao.consultarNome(nome).getNome().equals(nome)) {
                            JOptionPane.showMessageDialog(rootPane, "Produto já cadastrado com esse nome");
                            return;
                        }
                        resposta = congeladoDao.salvar(congelado);
                        if (resposta == 1) {
                            JOptionPane.showMessageDialog(null, congelado.toString());
                        } else if (resposta == 1062) {
                            JOptionPane.showMessageDialog(null, "Dados já cadastrado");
                        }

                        txtID.setEditable(true);
                        txtIdEstoqueOrigem.setEditable(true);
                        jbSalvar.setEnabled(false);
                        congeladoDao.desconectar();

                    }
                    break;

                case 2:

                    statusAcabado = acabadoDao.conectar();
                    if (statusAcabado == false) {
                        JOptionPane.showMessageDialog(null, "Erro de conexão");
                    } else {
                        try {
                            IdCongelado = Integer.parseInt(txtIdProdutoCongelado.getText());

                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(rootPane, "Formato Inválido!");
                            return;
                        }
                        if (testeIdProdutoCongelado == false) {
                            JOptionPane.showMessageDialog(rootPane, "Preencha o campo ID de Receitas somente com números de 3 dígitos");
                            return;
                        }

                        if (txtIdProdutoCongelado.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(rootPane, "Preencha o campo ID do campo RECEITA!");
                            return;
                        }
                        SimpleDateFormat conversor = new SimpleDateFormat("dd/MM/yyyy");
                        try {
                            Date dataConvertida = conversor.parse(strData);
                            sqlDate = new java.sql.Date(dataConvertida.getTime());
                        } catch (ParseException e) {
                            System.out.println("Erro na conversão da data");
                        }

                        if (txtNomeProdutoCongelado.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(rootPane, "Produto Congelado não encontrado");
                            return;
                        }
                        ProdutoCongelado congelado = new ProdutoCongelado();
                        congelado.setId(IdCongelado);
                        ProdutoAcabado acabado = new ProdutoAcabado(id, nome, descricao, preco, sqlDate, produtoCongelado);

                        if (acabadoDao.consultarNome(nome).getNome().equals(nome)) {
                            JOptionPane.showMessageDialog(rootPane, "Produto já cadastrado com esse nome");
                            return;
                        }

                        resposta = acabadoDao.salvar(acabado);
                        if (resposta == 1) {
                            JOptionPane.showMessageDialog(null, acabado.toString());
                        } else if (resposta == 1062) {
                            JOptionPane.showMessageDialog(null, "Dados já cadastrado");
                        }
                        txtID.setEditable(true);
                        txtIdEstoqueOrigem.setEditable(true);
                        jbSalvar.setEnabled(false);
                        acabadoDao.desconectar();

                    }
                    break;

                default:
                    JOptionPane.showMessageDialog(rootPane, "Produto Congelado não encontrado");
            }
        }

       limparTela();
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        int id = 0;
        int estoque = 0;

        boolean statusCongelado = congeladoDao.conectar();
        boolean statusAcabado = acabadoDao.conectar();

        try {
            id = Integer.parseInt(txtID.getText());
            estoque = Integer.parseInt(txtIdEstoqueOrigem.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "O campo ID e o campo ESTOQUE ORIGEM\nNÃO podem ser vazios!");
            return;
        }

        if (estoque == 1) {

            if (statusCongelado == true) {
                ProdutoCongelado congelado = congeladoDao.consultar(id);
                if (congelado == null) {
                    JOptionPane.showMessageDialog(null, "Não foi encontrado um produto com ID " + id + "\nno estoque CONGELADO");
                } else {
                    txtID.setText(String.valueOf(congelado.getId()));
                    txtIdEstoqueOrigem.setText(Integer.toString(estoque));
                    txtEstoqueOrigem.setText("CONGELADO");
                    txtNome.setText(congelado.getNome());
                    txtDescricao.setText(congelado.getDescricao());
                    txtPreco.setText(String.valueOf(congelado.getPreco()));
                    txtQuantidadeEmEstoque.setText(String.valueOf(congelado.getQuantidadeEmEstoque()));
                    txtData.setText(this.reverterData(String.valueOf(congelado.getData())));
                    txtProporcao.setText(String.valueOf(congelado.getProporcao()));
                    txtProporcao.setVisible(true);
                    jlRendimento.setVisible(true);
                    jPanelItem.setVisible(false);
                    jbExcluir.setEnabled(true);
                    return;
                }
            }

        } else if (estoque == 2) {
            if (statusAcabado == true) {
                ProdutoAcabado acabado = acabadoDao.consultar(id);
                if (acabado == null) {
                    JOptionPane.showMessageDialog(null, "Não foi encontrado um produto com ID " + id + "\nno estoque ACABADO");
                } else {

                    txtID.setText(String.valueOf(acabado.getId()));
                    txtIdEstoqueOrigem.setText(Integer.toString(estoque));
                    txtNome.setText(acabado.getNome());
                    txtEstoqueOrigem.setText("ACABADO");
                    txtDescricao.setText(acabado.getDescricao());
                    txtPreco.setText(String.valueOf(acabado.getPreco()));
                    txtQuantidadeEmEstoque.setText(String.valueOf(acabado.getQuantidadeEmEstoque()));
                    txtIdProdutoCongelado.setText(String.valueOf(acabado.getProdutoCongelado().getId()));
                    txtNomeProdutoCongelado.setText(acabado.getProdutoCongelado().getNome());
                    txtData.setText(this.reverterData(String.valueOf(acabado.getData())));
                    jPanelItem.setVisible(true);
                    jbExcluir.setEnabled(true);
                    return;
                }
            }

            JOptionPane.showMessageDialog(null, "Não foi encontrado um produto com ID " + id + "\nno estoque ACABADO");

        } else {
            JOptionPane.showMessageDialog(rootPane, "Estoque inválido");
        }

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        Object[] options = {"OK", "CANCELAR"};
        int id = 0;
        int estoque = 0;
        boolean statusCongelado = congeladoDao.conectar();
        boolean statusAcabado = acabadoDao.conectar();

        try {
            id = Integer.parseInt(txtID.getText());
            estoque = Integer.parseInt(txtIdEstoqueOrigem.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Formato Inválido!");
        }
        if (estoque == 1) {

            if (statusCongelado == false) {
                JOptionPane.showMessageDialog(null, "Erro de conexão");
            } else {

                ProdutoCongelado congelado = congeladoDao.consultar(id);

                if (congelado == null) {
                    JOptionPane.showMessageDialog(null, "Não foi encontrado um produto com ID " + id);
                } else {
                    int confirmacao = JOptionPane.showOptionDialog(null, "Deseja excluir o produto: \n" + "ID: " + congelado.getId() + "\nNome: " + congelado.getNome() + "\nDescrição: " + congelado.getDescricao(), "Aviso", JOptionPane.DEFAULT_OPTION,
                            JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                    if (confirmacao == 0) {

                        statusCongelado = congeladoDao.excluir(id);
                        JOptionPane.showMessageDialog(null, "Produto " + congelado.getNome() + " removido com sucesso!");
                        limparTela();
                        congeladoDao.desconectar();
                        return;
                    } else if (confirmacao == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Exclusão cancelada");
                    }
                }
            }

        } else if (estoque == 2) {
            if (statusAcabado == false) {
                JOptionPane.showMessageDialog(null, "Erro de conexão");
            } else {
                ProdutoAcabado acabado = acabadoDao.consultar(id);

                if (acabado == null) {
                    JOptionPane.showMessageDialog(null, "Não foi encontrado um produto com ID " + id);
                } else {
                    int confirmacao = JOptionPane.showOptionDialog(null, "Deseja excluir o produto: \n" + "ID: " + acabado.getId() + "\nNome: " + acabado.getNome() + "\nDescrição: " + acabado.getDescricao(), "Aviso", JOptionPane.DEFAULT_OPTION,
                            JOptionPane.WARNING_MESSAGE,
                            null, options, options[0]);
                    if (confirmacao == 0) {

                        statusAcabado = acabadoDao.excluir(id);

                        JOptionPane.showMessageDialog(null, "Produto " + acabado.getNome() + " removido com sucesso!");
                        limparTela();
                        acabadoDao.desconectar();
                        return;
                    } else if (confirmacao == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Exclusão cancelada");;
                    }
                }
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Estoque inválido");
        }

        limparTela();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void txtIdProdutoCongeladoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdProdutoCongeladoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int idProdutoCongelad = 0;
            try {
                idProdutoCongelad = Integer.parseInt(txtIdProdutoCongelado.getText());
            } catch (NumberFormatException e) {
                return;
            }
            if (idProdutoCongelad == 0) {
                return;
            }
            ProdutoCongelado congelado = new ProdutoCongelado();
            congelado = congeladoDao.consultar(idProdutoCongelad);

            txtNomeProdutoCongelado.setText(congelado.getNome());
            txtIdProdutoCongelado.setText(Integer.toString(congelado.getId()));
        }
    }//GEN-LAST:event_txtIdProdutoCongeladoKeyPressed

    private void txtIdProdutoCongeladoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdProdutoCongeladoFocusLost
        int idProdutoCongelad = 0;
        try {
            idProdutoCongelad = Integer.parseInt(txtIdProdutoCongelado.getText());
        } catch (NumberFormatException e) {
            return;
        }
        if (idProdutoCongelad == 0) {
            return;
        }
        ProdutoCongelado congelado = new ProdutoCongelado();
        congelado = congeladoDao.consultar(idProdutoCongelad);

        txtNomeProdutoCongelado.setText(congelado.getNome());
        txtIdProdutoCongelado.setText(Integer.toString(congelado.getId()));
    }//GEN-LAST:event_txtIdProdutoCongeladoFocusLost

    private void txtLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLimparActionPerformed
        this.limparTela();
    }//GEN-LAST:event_txtLimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaProduto.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaProduto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbVoltarProduto;
    private javax.swing.JLabel jLIdCongelado;
    private javax.swing.JLabel jLNomeCongelado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelItem;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbIncluir;
    private javax.swing.JButton jbRelatorio;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JLabel jlRendimento;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtEstoqueOrigem;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtIdEstoqueOrigem;
    private javax.swing.JTextField txtIdProdutoCongelado;
    private javax.swing.JButton txtLimpar;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeProdutoCongelado;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtProporcao;
    private javax.swing.JTextField txtQuantidadeEmEstoque;
    // End of variables declaration//GEN-END:variables

    public String reverterData(String data) {
        String dia = data.substring(8);
        String mes = data.substring(5, 7);
        String ano = data.substring(0, 4);
        String sqlDate = dia + "/" + mes + "/" + ano;
        return sqlDate;
    }

    public void limparTela() {
        txtID.setText("");
        txtData.setText("");
        txtDescricao.setText("");
        txtEstoqueOrigem.setText("");
        txtIdEstoqueOrigem.setText("");
        txtIdProdutoCongelado.setText("");
        txtNome.setText("");
        txtNomeProdutoCongelado.setText("");
        txtPreco.setText("");
        txtProporcao.setText("");
        txtQuantidadeEmEstoque.setText("");
        txtID.requestFocus();
        jbExcluir.setEnabled(false);
        jbSalvar.setEnabled(false);
    }
}
